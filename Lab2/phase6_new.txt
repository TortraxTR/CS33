
Dump of assembler code for function phase_6:
   0x000000000040111e <+0>:	push   %r14
   0x0000000000401120 <+2>:	push   %r13
   0x0000000000401122 <+4>:	push   %r12
   0x0000000000401124 <+6>:	push   %rbp
   0x0000000000401125 <+7>:	push   %rbx
   0x0000000000401126 <+8>:	sub    $0x50,%rsp
   0x000000000040112a <+12>:	lea    0x30(%rsp),%rsi			#rsi = rsp+0x30 = rsp+48
   0x000000000040112f <+17>:	callq  0x401c11 <read_six_numbers>	
   0x0000000000401134 <+22>:	lea    0x30(%rsp),%r12			#r12 = rsp+0x30 = rsp+48
   0x0000000000401139 <+27>:	lea    0x14(%r12),%r14			#r14 = r12+0x14 = rsp+68
   0x000000000040113e <+32>:	mov    $0x1,%r13d			#r13d = 1
   0x0000000000401144 <+38>:	jmp    0x40116e <phase_6+80>		#goto 0x40116e
   0x0000000000401146 <+40>:	callq  0x401666 <explode_bomb>
   0x000000000040114b <+45>:	jmp    0x40117d <phase_6+95>
   0x000000000040114d <+47>:	callq  0x401666 <explode_bomb>
   0x0000000000401152 <+52>:	add    $0x1,%rbx			#rbx++
   0x0000000000401156 <+56>:	cmp    $0x5,%ebx				
   0x0000000000401159 <+59>:	jg     0x401166 <phase_6+72>		#goto 0x401166 if ebx > 5
   0x000000000040115b <+61>:	mov    0x30(%rsp,%rbx,4),%eax		#eax = *(rsp+0x30+4*rbx)
   0x000000000040115f <+65>:	cmp    %eax,0x0(%rbp)			
   0x0000000000401162 <+68>:	jne    0x401152 <phase_6+52>		#goto 0x401152 if *(rbp) != eax
   0x0000000000401164 <+70>:	jmp    0x40114d <phase_6+47>		#explode if *(rbp) == eax

   0x0000000000401166 <+72>:	add    $0x1,%r13			#r13++
   0x000000000040116a <+76>:	add    $0x4,%r12			#r12+=4
   0x000000000040116e <+80>:	mov    %r12,%rbp			#rbp = r12
   0x0000000000401171 <+83>:	mov    (%r12),%eax			#eax = *(r12)
   0x0000000000401175 <+87>:	sub    $0x1,%eax			#eax--
   0x0000000000401178 <+90>:	cmp    $0x5,%eax			
   0x000000000040117b <+93>:	ja     0x401146 <phase_6+40>		#explode if eax > 5 (# of args must be <= 6)
   0x000000000040117d <+95>:	cmp    %r14,%r12			#r12 - r14
   0x0000000000401180 <+98>:	je     0x401187 <phase_6+105>		#goto 0x401187 if r12 == r14
   0x0000000000401182 <+100>:	mov    %r13,%rbx			#rbx = r13
   0x0000000000401185 <+103>:	jmp    0x40115b <phase_6+61>		#goto 0x40115b
   
  
   0x0000000000401187 <+105>:	mov    $0x0,%esi			#esi = 0
   
   0x000000000040118c <+110>:	mov    0x30(%rsp,%rsi,4),%ecx		#ecx = *(rsp+0x30+4*rsi)
   0x0000000000401190 <+114>:	mov    $0x1,%eax			#eax = 1
   0x0000000000401195 <+119>:	mov    $0x6042f0,%edx			#edx = 0x6042f0(node1: -87)
   0x000000000040119a <+124>:	cmp    $0x1,%ecx				
   0x000000000040119d <+127>:	jle    0x4011aa <phase_6+140>		#goto 0x4011aa if ecx <= 1
 
   0x000000000040119f <+129>:	mov    0x8(%rdx),%rdx			#rdx = rdx+0x8
   0x00000000004011a3 <+133>:	add    $0x1,%eax			#eax++
   0x00000000004011a6 <+136>:	cmp    %ecx,%eax			
   0x00000000004011a8 <+138>:	jne    0x40119f <phase_6+129>		#goto 0x40119f if ecx != eax
   0x00000000004011aa <+140>:	mov    %rdx,(%rsp,%rsi,8)		#rsp+rsi*8 = rdx
   0x00000000004011ae <+144>:	add    $0x1,%rsi			#rsi++

   
   0x00000000004011b2 <+148>:	cmp    $0x6,%rsi			
   0x00000000004011b6 <+152>:	jne    0x40118c <phase_6+110>		#goto 0x40118c if rsi != 6
   0x00000000004011b8 <+154>:	mov    (%rsp),%rbx			#rbx = *rsp
   0x00000000004011bc <+158>:	mov    0x8(%rsp),%rax			#rax = *(rsp+0x8)
   0x00000000004011c1 <+163>:	mov    %rax,0x8(%rbx)			#*(rbx+0x8) = rax
   0x00000000004011c5 <+167>:	mov    0x10(%rsp),%rdx			#rdx = *(rsp+0x10)
   0x00000000004011ca <+172>:	mov    %rdx,0x8(%rax)			#*(rax+0x8) = rdx
   0x00000000004011ce <+176>:	mov    0x18(%rsp),%rax			#rax = *(rsp+0x18)
   0x00000000004011d3 <+181>:	mov    %rax,0x8(%rdx)			#*(rdx+0x8) = rax
   0x00000000004011d7 <+185>:	mov    0x20(%rsp),%rdx			#rdx = *(rsp+0x20)
   0x00000000004011dc <+190>:	mov    %rdx,0x8(%rax)			#*(rax+0x8) = rdx
   0x00000000004011e0 <+194>:	mov    0x28(%rsp),%rax			#rax = *(rsp+0x28)
   0x00000000004011e5 <+199>:	mov    %rax,0x8(%rdx)			#*(rdx+0x8) = rax
   0x00000000004011e9 <+203>:	movq   $0x0,0x8(%rax)			#*(rax+0x8) = 0
   0x00000000004011f1 <+211>:	mov    $0x5,%ebp			#ebp = 5
   0x00000000004011f6 <+216>:	jmp    0x401201 <phase_6+227>		#goto 227
   
   0x00000000004011f8 <+218>:	mov    0x8(%rbx),%rbx			#rbx = *(rbx+0x8)
   0x00000000004011fc <+222>:	sub    $0x1,%ebp			#ebp--
   0x00000000004011ff <+225>:	je     0x401212 <phase_6+244>		#goto 0x401212
   0x0000000000401201 <+227>:	mov    0x8(%rbx),%rax			#rax = *(rbx+0x8)
   0x0000000000401205 <+231>:	mov    (%rax),%eax			#eax = *rax
   0x0000000000401207 <+233>:	cmp    %eax,(%rbx)			
   0x0000000000401209 <+235>:	jge    0x4011f8 <phase_6+218>		#goto 0x4011f8 if *rbx >= *rax (1st arg >= 2nd arg >= 3rd arg >= 4th arg >= 5th arg >= 6th arg)

   0x000000000040120b <+237>:	callq  0x401666 <explode_bomb>
   0x0000000000401210 <+242>:	jmp    0x4011f8 <phase_6+218>
   0x0000000000401212 <+244>:	cmpl   $0x21,0x203583(%rip)     	   
   0x0000000000401219 <+251>:	je     0x401228 <phase_6+266>		#explode if *(rip+0x203583) == 0x21 == 33
   0x000000000040121b <+253>:	add    $0x50,%rsp
   0x000000000040121f <+257>:	pop    %rbx
   0x0000000000401220 <+258>:	pop    %rbp
   0x0000000000401221 <+259>:	pop    %r12
   0x0000000000401223 <+261>:	pop    %r13
   0x0000000000401225 <+263>:	pop    %r14
   0x0000000000401227 <+265>:	retq   
   0x0000000000401228 <+266>:	callq  0x401666 <explode_bomb>
   0x000000000040122d <+271>:	jmp    0x40121b <phase_6+253>


x/200x 0x6042f0
0x6042f0 <node1>:	0xa9	0x01	0x00	0x00	0x01	0x00	0x00	0x00
0x6042f8 <node1+8>:	0x20	0x43	0x60	0x00	0x00	0x00	0x00	0x00
0x604300 <node2>:	0xfd	0x02	0x00	0x00	0x02	0x00	0x00	0x00
0x604308 <node2+8>:	0x10	0x43	0x60	0x00	0x00	0x00	0x00	0x00
0x604310 <node3>:	0xf4	0x01	0x00	0x00	0x03	0x00	0x00	0x00
0x604318 <node3+8>:	0xf0	0x42	0x60	0x00	0x00	0x00	0x00	0x00
0x604320 <node4>:	0x85	0x02	0x00	0x00	0x04	0x00	0x00	0x00
0x604328 <node4+8>:	0x40	0x43	0x60	0x00	0x00	0x00	0x00	0x00
0x604330 <node5>:	0x7a	0x00	0x00	0x00	0x05	0x00	0x00	0x00
0x604338 <node5+8>:	0x00	0x43	0x60	0x00	0x00	0x00	0x00	0x00
0x604340 <node6>:	0x8c	0x01	0x00	0x00	0x06	0x00	0x00	0x00
0x604348 <node6+8>:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00

line <+235> ensures each arg is >= the arg that comes after it 
so placing the nodes in descending order:
node2 > node4 > node3 > node1 > node6 > node5

solution:
2 4 3 1 6 5 