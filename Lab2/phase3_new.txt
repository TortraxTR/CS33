(gdb) disas phase_3
Dump of assembler code for function phase_3:
   0x0000000000400fbb <+0>:	push   %rbx
   0x0000000000400fbc <+1>:	sub    $0x10,%rsp			#allocate 16 bytes of space on the stack
   0x0000000000400fc0 <+5>:	movl   $0x0,0xc(%rsp)			#rsp+0xc = 0 
   0x0000000000400fc8 <+13>:	movl   $0x0,0x8(%rsp)			#rsp+0x8 = 0
   0x0000000000400fd0 <+21>:	lea    0x8(%rsp),%rcx			#rcx = rsp+0x8 = 0
   0x0000000000400fd5 <+26>:	lea    0xc(%rsp),%rdx			#rdx = rsp+0xc = 0
   0x0000000000400fda <+31>:	mov    $0x4031b1,%esi			#x/s 0x4031b1 = "%d %d"
   0x0000000000400fdf <+36>:	mov    $0x0,%eax			#eax = 0
   0x0000000000400fe4 <+41>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400fe9 <+46>:	cmp    $0x1,%eax			#eax - 0x1
   0x0000000000400fec <+49>:	jle    0x400ff8 <phase_3+61>		#explode if eax <= 1
   0x0000000000400fee <+51>:	mov    0x8(%rsp),%eax			#eax = rsp+0x8 
   0x0000000000400ff2 <+55>:	cmp    %eax,0xc(%rsp)			#rsp+0xc - eax
   0x0000000000400ff6 <+59>:	jne    0x400ffd <phase_3+66>		#explode if 1st argument == 2nd argument 
   0x0000000000400ff8 <+61>:	callq  0x401666 <explode_bomb>
   0x0000000000400ffd <+66>:	mov    0xc(%rsp),%edi			#edi = rsp+0xc (1st argument)
   0x0000000000401001 <+70>:	callq  0x400f6a <func_switch>		
   0x0000000000401006 <+75>:	mov    %eax,%ebx			#ebx = 0x10f
   0x0000000000401008 <+77>:	mov    0x8(%rsp),%edi			#edi = rsp+0x8 (2nd argument)
   0x000000000040100c <+81>:	callq  0x400f6a <func_switch>		
   0x0000000000401011 <+86>:	cmp    %eax,%ebx			#we want 1st and 2nd argument to jump to the same value in the jump table
   0x0000000000401013 <+88>:	jne    0x40101b <phase_3+96>		#else explode
   0x0000000000401015 <+90>:	add    $0x10,%rsp
   0x0000000000401019 <+94>:	pop    %rbx
   0x000000000040101a <+95>:	retq   
   0x000000000040101b <+96>:	callq  0x401666 <explode_bomb>
   0x0000000000401020 <+101>:	jmp    0x401015 <phase_3+90>


Dump of assembler code for function func_switch:
   0x0000000000400f6a <+0>:	cmp    $0x7,%edi			#edi - 0x7
   0x0000000000400f6d <+3>:	ja     0x400fa2 <func_switch+56>	#explode if edi > 7
   0x0000000000400f6f <+5>:	mov    %edi,%edi			#edi = edi
   0x0000000000400f71 <+7>:	jmpq   *0x402a60(,%rdi,8)		#mem[rdi * 8 + 0x402a60]
   0x0000000000400f78 <+14>:	mov    $0x15e,%eax			
   0x0000000000400f7d <+19>:	retq   
   0x0000000000400f7e <+20>:	mov    $0x1c0,%eax					
   0x0000000000400f83 <+25>:	retq   					
   0x0000000000400f84 <+26>:	mov    $0x2ab,%eax
   0x0000000000400f89 <+31>:	retq   
   0x0000000000400f8a <+32>:	mov    $0x10f,%eax			#same value; we want edi = 4
   0x0000000000400f8f <+37>:	retq   
   0x0000000000400f90 <+38>:	mov    $0x89,%eax
   0x0000000000400f95 <+43>:	retq   
   0x0000000000400f96 <+44>:	mov    $0x2fd,%eax
   0x0000000000400f9b <+49>:	retq   
   0x0000000000400f9c <+50>:	mov    $0x10f,%eax			#same value; we want edi = 7
   0x0000000000400fa1 <+55>:	retq   
   0x0000000000400fa2 <+56>:	sub    $0x8,%rsp
   0x0000000000400fa6 <+60>:	callq  0x401666 <explode_bomb>
   0x0000000000400fab <+65>:	mov    $0x0,%eax
   0x0000000000400fb0 <+70>:	add    $0x8,%rsp
   0x0000000000400fb4 <+74>:	retq   
   0x0000000000400fb5 <+75>:	mov    $0x2a9,%eax
   0x0000000000400fba <+80>:	retq   

(gdb) x/120x 0x402a60
0x402a60:	0xb5	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a68:	0x78	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a70:	0x7e	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a78:	0x84	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a80:	0x8a	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a88:	0x90	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a90:	0x96	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402a98:	0x9c	0x0f	0x40	0x00	0x00	0x00	0x00	0x00

There are 2 values in the switch statement that are equal. We want our 2 integer arguments to result in the same value after the switch statement.

solution: 4 7 
